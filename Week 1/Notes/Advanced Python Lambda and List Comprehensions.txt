You may have seen the keyword lambda
appear in this week's content, and you'll certainly see it appear more as you
spend more and more time with Python and data science. Lambda's are Python's way of
creating anonymous functions. These are the same as other functions,
but they have no name. The intent is that they're simple or short lived and it's easier just to
write out the function in one line instead of going to the trouble
of creating a named function. The lambda syntax is fairly simple. But it might take a bit
of time to get used to. You declare a lambda function with
the word lambda followed by a list of arguments, followed by a colon and
then a single expression and this is key. There's only one expression
to be evaluated in a lambda. The expression value is returned
on execution of the lambda. The return of a lambda
is a function reference. So in this case,
you would execute my_function and pass in three different parameters. Note that you can't have default
values for lambda parameters and you can't have complex logic
inside of the lambda itself because you're limited
to a single expression. So lambdas are really much more limited
than full function definitions. But I think they're very useful for
simple little data cleaning tasks. And you'll see lots of
examples with them on the web. So you should be able to read and
write lambdas. Let's give it a try here. We've learned a lot about sequences and
in Python. Tuples, lists, dictionaries and so forth. Sequences are structures that
we can iterate over, and often we create these through loops or
by reading in data from a file. Python has built in support for creating
these collections using a more abbreviated syntax called list comprehensions. Here's an example. First we write up a little for-loop. Here I'm iterating between zero and
1,000 and then checking with the modulus operator to see if the number divided
by two results in any decimals. If the modulus two of the number is zero,
then I know it divides evenly so this must be an even number and
I'll add it to our list. We can rewrite this as
a list comprehension by pulling the iteration on one line. We start the list comprehension
with the value we want in the list. In this case, it's a number. Then we put it in the for-loop, and then
finally, we add any condition clauses. You can see that this is much
more compact of a format. And it tends to be faster as well. Just like with lambdas,
list comprehensions are a condensed format which may offer readability and
performance benefits and you'll often find them being used in data
science tutorials or on stack overflow. But you're not required to use them
in the assignments in this course. Here, why don't you try converting
a function into a list comprehension.