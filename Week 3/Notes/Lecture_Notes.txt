Merging Dataframes

union - how='outer' join, left_index=True, right_

intersection - how='inner'


set addition =

    how='left'  (join)
    how='right' (join)

    left_on=['list'], right_on=['list']


    Example: Here are two DataFrames, products and invoices. The product DataFrame has an identifier and a sticker
    price. The invoices DataFrame lists the people, product identifiers, and quantity. Assuming that we want to
    generate totals, how do we join these two DataFrames together so that we have one which lists all of the information we need?

    products DataFrame:

                    Price	Product
    Product ID
    4109	        5.0	    Sushi Roll
    1412	        0.5	    Egg
    8931	        1.5	    Bagel


    invoices DataFrame:

                Customer	Product ID	Quantity
    0	        Ali	        4109	    1
    1	        Eric	    1412	    12
    2	        Ande	    8931	    6
    3	        Sam	        4109	    2


    print(pd.merge(products, invoices, left_index=True, right_on='Product ID'))

        Price    Product        Customer  Product ID  Quantity
    0   5.0      Sushi Roll     Ali       4109        1
    3   5.0      Sushi Roll     Sam       4109        2
    1   0.5      Egg            Eric      1412        12
    2   1.5      Bagel          Ande      8931        6



pd.merge(staff_df, student_df, how='inner', left_on=['First Name', 'Last Name'], right_on=['First Name','Last Name']

Pandas Idioms - idiomatic

    Chain Indesing

        df.loc['Washtenaw']['Total Ppoulation']   - generally bad, could return a copy

    Method Chaining

      (df.where(df['SUMLEV'] == 50)
        .dropna()
        .set_index(['STNAME','CTYNAME'])
        .rename(columns={ESTIMATESBASE2010':'Estimate Base 2010'}))


      print(df.drop(df[df['Quantity'] == 0].index).rename(columns={'Weight': 'Weight (oz.)'}))



Group by

    for group, frame in df.groupby('STNAME'):
      avg = np.average(frame['CENSUS2010POP'])
      print('Counties in state'+group+' have an average population of '+ str(avg))


    def fun(item):
      if item[0] < 'M':
        return 0
      if item[1] < 'Q':
        return 1
      return 2

    from group, frame in df.groupby(fun):
      print('There are' + str(len(frame))+'records in group'+ str(group) + 'for processing')


     df = pd.read_csv('census.csv')
     df = df[df['SUMLEV'] == 50]

     df.groupby('STNAME').agg({'CENSUS2010POP': np.average}



    print(df.groupby('Category').apply(lambda df,a,b: sum(df[a] * df[b]), 'Weight (oz.)', 'Quantity'))


    # Or alternatively without using a lambda:
    # def totalweight(df, w, q):
    #        return sum(df[w] * df[q])
    #
    # print(df.groupby('Category').apply(totalweight, 'Weight (oz.)', 'Quantity'))


Scales

    ratio scale - units equally spaced
    internval scale - units equally spaced, no true zero
    ordinal scale - order of units important (A+, A, A-, B+...)
    nomical scale - categories of data, ie - teams of a sport


    nomical data == categorial data (astype)
        grades = df['Grades'].astype('category')

    ordinal data
        grades = df['Grades'].astype('category', categories = ['D','D+','C-','C','C+','B-','B','B+','A-','A','A+'],ordered=True)
        grades.head()

    df.cut
    pd.cut(s, 3)

    # You can also add labels for the sizes [Small < Medium < Large].
    pd.cut(s, 3, labels=['Small', 'Medium', 'Large'])


Pivot Tables

    df = pd.read_csv('cars.csv')

    df.pivot_table[values='(kW)', index='YEAR', columns='Make', aggfunc=np.mean]

    print(pd.pivot_table(Bikes, index=['Manufacturer','Bike Type']))

Date Functionality

    pd.Timestamp('9/1/2016 10:05AM')

    pd.Period('1/2016')

    t1 = pd.Series(list('abc'),[pd.Timestamp('2016-09-01')],[pd.Timestamp('2016-09-02')],[pd.Timestamp('2016-09-03')])

    print(type(t1))

    t2 = pd.Series(list('abc'),[pd.Period('2016-09')],[pd.Period('2016-10')],[pd.Period('2016-11')])

    print(type(t2))

    pd.Timestamp('9/2/2018' 8:10AM') + pd.Timedelta('12D 3H')

    df.asfreq('W', method='ffill')


Goodhart's Law

    Key Performance Indicators (KPI)

    Goodhart's law states that once a measure is turned into a target, it ceases to be a good measure.


    If you pick a particular metric and optimize for that metric, then it can be manipulated. By being agile and have the
    ability to


